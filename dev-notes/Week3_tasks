# 📅 ChronoChem 第三週任務計畫：視覺沉浸 & 多場景支援

## 🎯 核心目標
- 強化 3D 場景的光影、材質與氣氛
- 支援多個歷史時代場景切換（至少 2 個以上）
- 加入背景音效與資源載入優化，提升沉浸體驗

---

## 🔧 前端 (Vue3 + Three.js)

### 1. 視覺強化：燈光與材質
- [x] 建立 `threejs/lights.ts` 模組，統一定義光源設定（如 AmbientLight + PointLight）
- [x] 套用陰影設定（`castShadow`、`receiveShadow`）
- [x] 模型使用 `MeshStandardMaterial`，加入簡易 PBR 材質（玻璃、金屬等）
- [x] 使用 `sRGBEncoding`、`ACESToneMapping` 調整顯示效果

### 2. 背景音效整合
- [x] 為不同時代加入背景音效（如：火爐聲、筆記聲）
- [x] 使用 `AudioListener` 與 `PositionalAudio` 加入空間感
- [x] 在 UI 加入音量控制按鈕（可切換靜音/播放）

### 3. 多場景支援與模組化
- [x] 將 `Scene1774.ts`, `Scene1869.ts` 拆為獨立模組
- [x] 實作 `SceneManager`，根據 `route.params.id` 載入對應場景
- [x] 每個場景支援個別人物、背景音、GLTF 模型與實驗描述

### 4. 資源載入優化
- [x] 使用 `useGLTFLoader` 封裝 GLTF 載入（支援 loading 狀態）
- [x] 加入 `LoadingScreen.vue`，顯示過場動畫或 loading bar
- [x] 嘗試使用 `DracoLoader` 或壓縮 GLTF 模型優化速度

---

## 🧠 後端 (Django + DRF)

### 1. 資料欄位擴充
- [x] `Era` 模型新增 `soundtrack_url` 欄位
- [x] `HistoricalEvent` 模型新增 `location`、`experiment_description`

### 2. API 補強
- [x] `/api/era/:id/detail/` 回傳：
  - GLTF 模型檔案名稱（供前端載入）
  - 對應人物列表
  - 時代描述 + 背景音效連結

---

## 🧪 測試項目

### 視覺測試
- [x] 不同裝置解析度下的相機與光源效果是否合理
- [x] 材質是否有金屬/玻璃反射感
- [x] 陰影是否正確落在地面或物體上

### 音效測試
- [x] 每個場景背景音效是否能正確播放
- [x] 音量控制是否正常運作（音量條或靜音按鈕）
- [x] 聲音是否能在切換場景時停止或銜接

### 載入與切換測試
- [x] 不同時代切換是否能正確載入模型
- [x] loading 畫面是否出現與消失適時
- [x] 錯誤資源載入時是否有 fallback 或提示

---

## 📁 前端目錄結構新增建議
frontend/
└── src/
├── threejs/
│   ├── scenes/
│   │   ├── Scene1774.ts ✅
│   │   ├── Scene1869.ts ✅
│   ├── lights/
│   │   └── defaultLights.ts ✅
│   ├── audio/
│   │   └── ambientSoundManager.ts ✅
│   ├── loaders/
│   │   ├── useGLTFLoader.ts ✅
│   │   ├── useAudioLoader.ts
├── components/
│   └── LoadingScreen.vue ✅

---

## ✅ 預期成果

- [x] 不同歷史場景皆有獨立 3D 模型、光影與音效設定
- [x] 前端支援多時代 GLTF 懶載入，切換順暢
- [x] 每個場景的音效、光影、材質呈現提升沉浸感
- [x] 出現 loading 過場畫面避免白屏
- [x] 後端支援對應場景的 GLTF 與音效資料供應

---

## 🔄 後端數據庫遷移

### 1. 創建遷移文件
```bash
python manage.py makemigrations
```

### 2. 執行遷移
```bash
python manage.py migrate
```

### 3. 創建超級用戶（用於訪問管理界面）
```bash
python manage.py createsuperuser
```

### 4. 運行測試
```bash
python manage.py test
```