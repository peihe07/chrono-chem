services:
  frontend:
    build:
      target: builder
    command: npm run dev
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:8001
    ports:
      - "3000:3000"
    depends_on:
      - backend

  backend:
    command: python manage.py runserver 0.0.0.0:8001
    volumes:
      - ./backend:/app
    environment:
      - DJANGO_DEBUG=True
      - DJANGO_SETTINGS_MODULE=config.settings
      - POSTGRES_DB=${POSTGRES_DB:-chronochem}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_HOST=db
      - REDIS_URL=redis://redis:6379/0
    ports:
      - "8001:8001"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  db:
    image: postgres:16-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-chronochem}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  celery:
    command: celery -A config.celery:app worker -l DEBUG
    volumes:
      - ./backend:/app
    environment:
      - DJANGO_DEBUG=True
      - DJANGO_SETTINGS_MODULE=config.settings
      - POSTGRES_DB=${POSTGRES_DB:-chronochem}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_HOST=db
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - redis
      - db

volumes:
  postgres_data:
  redis_data: 