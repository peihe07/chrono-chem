upstream backend {
    server backend:8001;
}

# 80 port 轉址
server {
    listen 80;
    server_name www.chronochem.uno;
    return 301 https://chronochem.uno$request_uri;
}

server {
    listen 80;
    server_name chronochem.uno;
    # 原本的內容放這裡
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;
    return 301 https://chronochem.uno$request_uri;
}

# 443 port 轉址
server {
    listen 443 ssl;
    server_name www.chronochem.uno;
    ssl_certificate /etc/nginx/ssl/chronochem.crt;
    ssl_certificate_key /etc/nginx/ssl/chronochem.key;
    return 301 https://chronochem.uno$request_uri;
}

server {
    listen 443 ssl;
    server_name chronochem.uno;
    ssl_certificate /etc/nginx/ssl/chronochem.crt;
    ssl_certificate_key /etc/nginx/ssl/chronochem.key;
    # 這裡放原本的 location /api/ 等設定
    # SSL 配置
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;
    # 安全標頭
    add_header Strict-Transport-Security "max-age=63072000" always;
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    # CORS 設置
    set $cors_origin "";
    if ($http_origin ~ "^https?://(chronochem\.uno|localhost:3000|127\.0\.0\.1:3000|localhost:5173|127\.0\.0\.1:5173)$") {
        set $cors_origin $http_origin;
    }
    # API 代理
    location /api/ {
        proxy_pass http://backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        # CORS 預檢請求處理
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' $cors_origin always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }
        # 正常請求的 CORS 頭
        add_header 'Access-Control-Allow-Origin' $cors_origin always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
    }
    # 靜態文件
    location /static/ {
        alias /usr/share/nginx/static/;
        expires 1h;
        add_header Cache-Control "public, no-transform";
    }
    # 媒體文件
    location /media/ {
        alias /usr/share/nginx/media/;
        expires 1h;
        add_header Cache-Control "public, no-transform";
    }
    # 健康檢查
    location /health {
        access_log off;
        return 200 'healthy\n';
    }
} 