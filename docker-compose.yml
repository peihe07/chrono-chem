version: '3.8'

services:
  backend:
    build: ./backend
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    environment:
      - NODE_ENV=production
    restart: always

  celery:
    build:
      context: ./backend
      dockerfile: ../docker/backend/celery.Dockerfile
    volumes:
      - ./backend:/app
    env_file:
      - ./backend/.env
    depends_on:
      - backend
      - redis
    networks:
      - chronochem-network

  db:
    build:
      context: ./docker/db
      dockerfile: Dockerfile
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/var/lib/postgresql/backups
    environment:
      - POSTGRES_DB=chrono_chem
      - POSTGRES_USER=chrono_user
      - POSTGRES_PASSWORD=securepassword
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chrono_user -d chrono_chem"]
      interval: 30s
      timeout: 3s
      retries: 3
    restart: unless-stopped
    networks:
      - chronochem-network

  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    networks:
      - chronochem-network
    ports:
      - "6379:6379"
    restart: unless-stopped

  nginx:
    image: nginx:1.25-alpine
    volumes:
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      - ./docker/nginx/ssl:/etc/nginx/ssl
      - static_volume:/usr/share/nginx/static
      - media_volume:/usr/share/nginx/media
      - /etc/letsencrypt:/etc/letsencrypt:ro
    depends_on:
      - backend
    networks:
      - chronochem-network
    ports:
      - "8082:80"  
      - "8443:443"
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:

networks:
  chronochem-network:
    driver: bridge